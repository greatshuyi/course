// File: age_matrix.v
// Generated by MyHDL 0.11
// Date: Sat Oct  5 17:39:52 2019

module one_hot_check #(
    parameter WIDTH = 4
) (
    input  wire [WIDTH-1:0] in,
    output wire             out
);

localparam integer ONE = 1;

reg ohot;
integer i;

always @(*) begin
    ohot = 1'b0;
    for(i=0; i<WIDTH; i=i+1) begin
        ohot = (in == (ONE << i)) ? 1'b1 : 1'b0;
    end
end

assign out = ohot;

endmodule

module age_matrix (
    clk,
    rst_n,
    alloc,
    dealloc,
    mask,
    oldest,
    youngest,
    old_vld,
    yog_vld
);

parameter ENTRIES = 4;

input                clk;
input                rst_n;
input [ENTRIES-1:0]  alloc;
input [ENTRIES-1:0]  dealloc;
input [ENTRIES-1:0]  mask;

output [ENTRIES-1:0] oldest;
output [ENTRIES-1:0] youngest;

output               old_vld;
output               yog_vld;

wire [ENTRIES-1:0]   oldest;
wire [ENTRIES-1:0]   youngest;


reg [ENTRIES-1:0] entries [ENTRIES-1:0];
wire [ENTRIES-1:0] rows [ENTRIES-1:0];
wire [ENTRIES-1:0] cols [ENTRIES-1:0];


always @(posedge clk or negedge rst_n) begin: AGE_MATRIX__DE_ALLOC
    integer r;
    integer c;
    if (!rst_n) begin
	/*
        entries[0] <= 0;
        entries[1] <= 0;
        entries[2] <= 0;
        entries[3] <= 0;
	*/
		for(r=0; r<ENTRIES; r=r+1) begin
			entries[r] <= 0;
		end
    end
    else begin
        for (r=0; r<4; r=r+1) begin
            for (c=0; c<4; c=c+1) begin
                if ((alloc[r] == 1)) begin
                    if ((c == r)) begin
                        entries[r][c] <= 1;
                    end
                    else begin
                        if ((dealloc[c] == 1)) begin
                            entries[r][c] <= 0;
                        end
                        else begin
                            entries[r][c] <= entries[c][c];
                        end
                    end
                end
                else begin
                    if ((dealloc[c] == 1)) begin
                        entries[r][c] <= 0;
                    end
                    else begin
                        entries[r][c] <= entries[r][c];
                    end
                end
            end
        end
    end
end

genvar i, j;
generate
for(i=0; i<ENTRIES; i=i+1) begin: row
	for(j=0; j<ENTRIES; j=j+1) begin: col
	    assign rows[i][j] = entries[i][j];
	    assign cols[i][j] = entries[j][i];
	end
end
endgenerate

generate
for(i=0; i<ENTRIES; i=i+1) begin: ohot

	one_hot_check #(.WIDTH(ENTRIES)) rcheck(
		.in(rows[i]),
		.out(oldest[i])
	);

	one_hot_check #(.WIDTH(ENTRIES)) ccheck(
		.in(cols[i]),
		.out(youngest[i])
	);
end
endgenerate


one_hot_check #(.WIDTH(ENTRIES)) old_check(
    .in(oldest),
    .out(old_vld) );

one_hot_check #(.WIDTH(ENTRIES)) yog_check(
    .in(youngest),
    .out(yog_vld) );


endmodule

